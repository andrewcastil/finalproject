---
title: "Final Project Data"
author: "Andrew, Ania, and Kayla"
format: html
editor: visual
---

```{r}
library(rio)
library(here)
library(psych)
library(dplyr)
library(ggplot2)
library(tidyr)
library(ggplot2)
library(corrplot)
library(glmnet)
library(tidyverse)
```

## Simulating the data

```{r}
set.seed(7)

n_respondents <- 10000

simulated_data <- data.frame(matrix(ncol = 100, nrow = n_respondents))
colnames(simulated_data) <- paste0("item_", 1:100)

# Loop to simulate factor1 25 times
for (i in 1:25) {
    # Simulate factor1
    simulated_factor1 <- sample(1:5, n_respondents, replace = TRUE, prob = c(0.1, 0.2, 0.4, 0.2, 0.1)) #Mean closer to 3
    simulated_data[,i] <- simulated_factor1
}

for (i in 1:25) {
    # Simulate factor2
    simulated_factor2 <- sample(1:5, n_respondents, replace = TRUE, prob = c(0.2, 0.3, 0.3, 0.1, 0.1)) #Mean closer to 2

simulated_data[,i+25] <- simulated_factor2
}

for (i in 1:25) {
    # Simulate factor3
    simulated_factor3 <- sample(1:5, n_respondents, replace = TRUE, prob = c(0.1, 0.1, 0.2, 0.3, 0.3)) #Mean closer to 4
    simulated_data[,i+50] <- simulated_factor3
}

for (i in 1:25) {
    # Simulate factor4
    simulated_factor4 <- sample(1:5, n_respondents, replace = TRUE, prob = c(0.25, 0.25, 0.2, 0.15, 0.15)) #Mean closer to 2.5
    simulated_data[,i+75] <- simulated_factor4
}

gender <- sample(c("F", "M"), n_respondents, replace = TRUE, prob = c(0.66, 0.34)) #Simulating gender. 66% F/34% M as per the original sample.

ages <- pmax(pmin(round(rnorm(n_respondents, mean = 30, sd = 14)), 99), 18) #Simulating skewed distribution with a mean around 30, sd of around 14 as per the original sample.

race_categories <- c("White", "Black", "Asian", "Hispanic", "Other") #Simulating race similar to the original data
race <- sample(race_categories, n_respondents, replace = TRUE, prob = c(0.7, 0.05, 0.1, 0.1, 0.05))

countries <- c("USA", "Canada", "UK", "Germany", "Australia", "India", "China", "Brazil", "South Africa", "Japan") #Simulating location using a subset of countries (using all 200 is too taxing for this project)
geographic_location <- sample(countries, n_respondents, replace = TRUE, prob = c(0.3, 0.1, 0.1, 0.05, 0.05, 0.1, 0.1, 0.1, 0.05, 0.05))

participant_id <- sprintf("%05d", 1:n_respondents) #Giving each row a unique identifier

#Making it harder on ourselves by including missing data (the real data has a lot of missingness)
num_missing <- round(0.15 * n_respondents)

#Function to introduce missing data into a column
introduce_missing <- function(column) {
    #Randomly select indices to be set as NA
    missing_indices <- sample(1:n_respondents, num_missing, replace = FALSE)
    column[missing_indices] <- NA
    return(column)
}

#Here, we introduce 15% missingness into the data
for(i in 1:100){
  simulated_data[,i] <- introduce_missing(simulated_data[,i])
}

scale_data <- data.frame(participant_id, ages, factor(gender), factor(race), factor(geographic_location), simulated_data) #Consolidating everything into one set.

#NOTE: In the scale data, item_1 through item_25 correspond to factor 1, and so on up to factor 4.

colnames(scale_data)[1:5] <- c('participant_id', 'age', 'gender', 'race', 'country') #Cleaning up the names

write.csv(scale_data, here(file_path <- here("data", "scale_data.csv"))) #Saving it to the data folder

```

## Properties of the data

```{r}
#Descriptives of the 100 items
descScaleItems <- psych::describe(scale_data[,6:105])

#Administrations of each
administrations <- describe(descScaleItems$n)

#Pairwise complete administrations
pwiseAdminsScaleItems <- pairwiseCount(scale_data[,6:105], diagonal = TRUE)
pwiseAdminsScaleItemsVec <- as.vector(pwiseAdminsScaleItems[lower.tri(pwiseAdminsScaleItems)])
pwiseAdminsScaleItemsVecDescribe <- psych::describe(pwiseAdminsScaleItemsVec)
pwiseAdminsScaleItemsVecDescribe
n_obs <- pwiseAdminsScaleItemsVecDescribe$mean #Mean number of pairwise-complete administrations of all items


```

## Tidying the data

```{r}
#Handling NAs by replacing with mean of column 

for (i in 7:ncol(scale_data)) {
  scale_data[[i]][is.na(scale_data[[i]])] <- mean(scale_data[[i]], na.rm = TRUE)
}
imp_sim <- makeX(simulated_data, na.impute = TRUE, sparse = FALSE)


#creates version of data where each row is an individual score 

scale_data_long <- pivot_longer(
  data = scale_data,
  cols = 6:105,
  names_to = "item",
  values_to = "score"
)

#creates version of data where each participant has 4 rows (one for each factor)

scale_data_wide <- scale_data_long %>% 
  mutate(item = parse_number(item)) %>% 
  mutate(factor = case_when(
    item <= 25 ~ 1,
    item > 25 & item <= 50 ~ 2,
    item > 50 & item <= 75 ~ 3,
    item > 75 ~ 4)) %>% 
  pivot_wider(
    names_from = item,
    values_from = score
  )

#creates separate dataframes for each factor 

factor_1 <- scale_data %>% 
  select(1:30)

factor_2 <- scale_data %>% 
  select(1:5, 31:55)

factor_3 <- scale_data %>% 
  select(1:5, 56:80)

factor_4 <- scale_data %>% 
  select(1:5, 81:105)

```

## Visualizing the data

```{r}

#doing a correlation matrix of all the items

matrix <-cor(imp_sim, use="pairwise") 
unlist(matrix)

#making a correlation plot 
corrplot(corr= matrix, method = "square")


#Correlation matrix for each factor starting with factor 1

matrix1 <-cor(imp_sim[,1:25], use="pairwise") 
unlist(matrix)
corrplot(corr= matrix1, method = "square")

#Correlation matrix for factor 2
matrix2 <-cor(imp_sim[,26:50], use="pairwise") 
unlist(matrix)
corrplot(corr= matrix2, method = "square")

#Correlation matrix for factor 3
matrix3 <-cor(imp_sim[,51:75], use="pairwise") 
unlist(matrix)
corrplot(corr= matrix3, method = "square")

#Correlation matrix for factor 4
matrix4 <-cor(imp_sim[,76:100], use="pairwise") 
unlist(matrix)
corrplot(corr= matrix4, method = "square")

```

```{r}
#comparing age demographics for white and non-white races

scale_data %>%
filter(race == "White") %>%
summarize(mean(age))

scale_data %>%
filter(race != "White") %>%
summarize(mean(age))

break_down<- scale_data %>%
  group_by(gender, race, country) %>%
  mutate(avg_age= mean(age))

#visualizing demographics

break_down %>%
  ggplot(aes(avg_age, race))+
  geom_col(aes(fill = gender), position = "dodge") +
  facet_wrap(~country, ncol= 2) +
  theme_minimal()
```

```{r}
#visualizing mean responses for each factor 

mean_scores <- scale_data_long %>% 
  group_by(item) %>% 
  summarize(mean = mean(score))

mean_scores %>% 
  mutate(item = parse_number(item)) %>% 
  mutate(factor = case_when(
    item <= 25 ~ "Anxiety",
    item > 25 & item <= 50 ~ "Hopelessness",
    item > 50 & item <= 75 ~ "Resentment",
    item > 75 ~ "Shame")) %>% 
  ggplot(aes(x = item, y = mean)) +
  geom_col(fill= "blue1") +
  labs(y = "Mean Response (1-5)",
       x = "Item",
       title = "Mean Responses to Items by Factor") +
  facet_wrap(~factor) +
  theme_minimal() 
```
